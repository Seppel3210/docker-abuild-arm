Additions for build.rs by q66, necessary for our musl setup.

From 1eb558f246269606c6d8d73824ef6b44fa10764e Mon Sep 17 00:00:00 2001
From: Samuel Holland <samuel@sholland.org>
Date: Sat, 9 Sep 2017 00:14:16 -0500
Subject: [PATCH 06/16] Prefer libgcc_eh over libunwind for musl

---
 src/libunwind/lib.rs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/libunwind/lib.rs b/src/libunwind/lib.rs
index 9182e349b19..0377fbb58fc 100644
--- a/library/unwind/src/lib.rs
+++ b/library/unwind/src/lib.rs
@@ -48,7 +48,7 @@
         #[link(name = "unwind", cfg(not(target_feature = "crt-static")))]
         extern "C" {}
     } else {
-        #[link(name = "unwind", kind = "static", cfg(target_feature = "crt-static"))]
+        #[link(name = "gcc_eh", cfg(target_feature = "crt-static"))]
         #[link(name = "gcc_s", cfg(not(target_feature = "crt-static")))]
         extern "C" {}
     }
diff --git a/src/libunwind/build.rs b/src/libunwind/build.rs
index f24d957..28828e5 100644
--- a/library/unwind/build.rs
+++ b/library/unwind/build.rs
@@ -10,7 +10,7 @@
     }
 
     if cfg!(feature = "llvm-libunwind")
-        && ((target.contains("linux") && !target.contains("musl")) || target.contains("fuchsia"))
+        && (target.contains("linux") || target.contains("fuchsia"))
     {
         // Build the unwinding from libunwind C/C++ source code.
         llvm_libunwind::compile();
@@ -18,9 +18,7 @@
         llvm_libunwind::compile();
     } else if target.contains("linux") {
         // linking for Linux is handled in lib.rs
-        if target.contains("musl") {
-            llvm_libunwind::compile();
-        } else if target.contains("android") {
+        if target.contains("android") {
             let build = cc::Build::new();
 
             // Since ndk r23 beta 3 `libgcc` was replaced with `libunwind` thus
@@ -92,15 +90,6 @@
             cc_cfg.flag("-std=c99");
         }
 
-        if target.contains("x86_64-fortanix-unknown-sgx") || target_env == "musl" {
-            // use the same GCC C compiler command to compile C++ code so we do not need to setup the
-            // C++ compiler env variables on the builders.
-            // Don't set this for clang++, as clang++ is able to compile this without libc++.
-            if cpp_cfg.get_compiler().is_like_gnu() {
-                cpp_cfg.cpp(false);
-            }
-        }
-
         for cfg in [&mut cc_cfg, &mut cpp_cfg].iter_mut() {
             cfg.warnings(false);
             cfg.flag("-fstrict-aliasing");
